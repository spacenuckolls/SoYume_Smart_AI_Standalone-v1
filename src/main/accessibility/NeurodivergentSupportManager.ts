import { EventEmitter } from 'events';

export interface NeurodivergentSettings {
  adhdMode: boolean;
  autismMode: boolean;
  dyslexiaMode: boolean;
  anxietySupport: boolean;
  sensoryConsiderations: boolean;
  routineSupport: boolean;
  distractionReduction: boolean;
  executiveFunctionSupport: boolean;
}

export interface ADHDSettings {
  focusMode: boolean;
  breakReminders: boolean;
  taskChunking: boolean;
  hyperfocusProtection: boolean;
  distractionBlocking: boolean;
  motivationalCues: boolean;
  timeAwareness: boolean;
}

export interface AutismSettings {
  predictableInterface: boolean;
  changeNotifications: boolean;
  sensoryReduction: boolean;
  routineTemplates: boolean;
  socialCueAssistance: boolean;
  overloadPrevention: boolean;
  detailOrientation: boolean;
}

export interface DyslexiaSettings {
  dyslexicFont: boolean;
  increasedSpacing: boolean;
  colorOverlays: boolean;
  readingGuides: boolean;
  phonicSupport: boolean;
  wordPrediction: boolean;
  readAloud: boolean;
}

export class NeurodivergentSupportManager extends EventEmitter {
  private settings: NeurodivergentSettings;
  private adhdSettings: ADHDSettings;
  private autismSettings: AutismSettings;
  private dyslexiaSettings: DyslexiaSettings;
  private focusTimer: NodeJS.Timeout | null = null;
  private breakTimer: NodeJS.Timeout | null = null;
  private currentFocusSession = 0;
  private distractionElements: HTMLElement[] = [];\n\n  constructor() {\n    super();\n    this.settings = this.getDefaultSettings();\n    this.adhdSettings = this.getDefaultADHDSettings();\n    this.autismSettings = this.getDefaultAutismSettings();\n    this.dyslexiaSettings = this.getDefaultDyslexiaSettings();\n  }\n\n  async initialize(): Promise<void> {\n    this.setupNeurodivergentSupport();\n    this.loadUserPreferences();\n    \n    console.log('Neurodivergent Support Manager initialized');\n  }\n\n  private getDefaultSettings(): NeurodivergentSettings {\n    return {\n      adhdMode: false,\n      autismMode: false,\n      dyslexiaMode: false,\n      anxietySupport: false,\n      sensoryConsiderations: false,\n      routineSupport: false,\n      distractionReduction: false,\n      executiveFunctionSupport: false\n    };\n  }\n\n  private getDefaultADHDSettings(): ADHDSettings {\n    return {\n      focusMode: false,\n      breakReminders: true,\n      taskChunking: true,\n      hyperfocusProtection: true,\n      distractionBlocking: false,\n      motivationalCues: true,\n      timeAwareness: true\n    };\n  }\n\n  private getDefaultAutismSettings(): AutismSettings {\n    return {\n      predictableInterface: true,\n      changeNotifications: true,\n      sensoryReduction: false,\n      routineTemplates: true,\n      socialCueAssistance: false,\n      overloadPrevention: true,\n      detailOrientation: true\n    };\n  }\n\n  private getDefaultDyslexiaSettings(): DyslexiaSettings {\n    return {\n      dyslexicFont: false,\n      increasedSpacing: false,\n      colorOverlays: false,\n      readingGuides: false,\n      phonicSupport: false,\n      wordPrediction: false,\n      readAloud: false\n    };\n  }\n\n  updateSettings(newSettings: Partial<NeurodivergentSettings>): void {\n    this.settings = { ...this.settings, ...newSettings };\n    this.applySettings();\n  }\n\n  updateADHDSettings(newSettings: Partial<ADHDSettings>): void {\n    this.adhdSettings = { ...this.adhdSettings, ...newSettings };\n    if (this.settings.adhdMode) {\n      this.applyADHDSupport();\n    }\n  }\n\n  updateAutismSettings(newSettings: Partial<AutismSettings>): void {\n    this.autismSettings = { ...this.autismSettings, ...newSettings };\n    if (this.settings.autismMode) {\n      this.applyAutismSupport();\n    }\n  }\n\n  updateDyslexiaSettings(newSettings: Partial<DyslexiaSettings>): void {\n    this.dyslexiaSettings = { ...this.dyslexiaSettings, ...newSettings };\n    if (this.settings.dyslexiaMode) {\n      this.applyDyslexiaSupport();\n    }\n  }\n\n  private applySettings(): void {\n    if (this.settings.adhdMode) {\n      this.applyADHDSupport();\n    } else {\n      this.removeADHDSupport();\n    }\n\n    if (this.settings.autismMode) {\n      this.applyAutismSupport();\n    } else {\n      this.removeAutismSupport();\n    }\n\n    if (this.settings.dyslexiaMode) {\n      this.applyDyslexiaSupport();\n    } else {\n      this.removeDyslexiaSupport();\n    }\n  }\n\n  private setupNeurodivergentSupport(): void {\n    this.createSupportStyles();\n    this.setupEventListeners();\n  }\n\n  private createSupportStyles(): void {\n    const style = document.createElement('style');\n    style.id = 'neurodivergent-support-styles';\n    style.textContent = `\n      /* ADHD Support Styles */\n      .adhd-focus-mode {\n        filter: blur(0px) !important;\n        opacity: 1 !important;\n      }\n      \n      .adhd-focus-mode * {\n        animation: none !important;\n        transition: none !important;\n      }\n      \n      .adhd-distraction-blur {\n        filter: blur(2px);\n        opacity: 0.3;\n        pointer-events: none;\n      }\n      \n      .adhd-focus-indicator {\n        position: fixed;\n        top: 10px;\n        right: 10px;\n        background: #28a745;\n        color: white;\n        padding: 8px 16px;\n        border-radius: 20px;\n        font-size: 12px;\n        z-index: 10000;\n        box-shadow: 0 2px 8px rgba(0, 0, 0, 0.2);\n      }\n      \n      .adhd-break-reminder {\n        position: fixed;\n        top: 50%;\n        left: 50%;\n        transform: translate(-50%, -50%);\n        background: #ffc107;\n        color: #212529;\n        padding: 20px;\n        border-radius: 12px;\n        text-align: center;\n        z-index: 10001;\n        box-shadow: 0 4px 16px rgba(0, 0, 0, 0.3);\n      }\n      \n      /* Autism Support Styles */\n      .autism-predictable-layout {\n        transition: none !important;\n      }\n      \n      .autism-change-notification {\n        position: fixed;\n        top: 20px;\n        left: 50%;\n        transform: translateX(-50%);\n        background: #17a2b8;\n        color: white;\n        padding: 12px 20px;\n        border-radius: 8px;\n        z-index: 10000;\n        box-shadow: 0 4px 12px rgba(0, 0, 0, 0.2);\n      }\n      \n      .autism-sensory-reduced {\n        filter: contrast(0.8) brightness(0.9);\n      }\n      \n      .autism-sensory-reduced * {\n        animation: none !important;\n        transition: opacity 0.1s ease !important;\n      }\n      \n      /* Dyslexia Support Styles */\n      .dyslexia-font {\n        font-family: 'OpenDyslexic', 'Comic Sans MS', cursive !important;\n      }\n      \n      .dyslexia-spacing {\n        line-height: 1.8 !important;\n        letter-spacing: 0.1em !important;\n        word-spacing: 0.2em !important;\n      }\n      \n      .dyslexia-overlay {\n        position: relative;\n      }\n      \n      .dyslexia-overlay::before {\n        content: '';\n        position: absolute;\n        top: 0;\n        left: 0;\n        right: 0;\n        bottom: 0;\n        background: rgba(255, 255, 0, 0.1);\n        pointer-events: none;\n        z-index: 1;\n      }\n      \n      .dyslexia-reading-guide {\n        position: absolute;\n        height: 2px;\n        background: #007bff;\n        width: 100%;\n        z-index: 10;\n        pointer-events: none;\n        transition: top 0.1s ease;\n      }\n      \n      /* General Accessibility Enhancements */\n      .reduced-motion * {\n        animation-duration: 0.01ms !important;\n        animation-iteration-count: 1 !important;\n        transition-duration: 0.01ms !important;\n      }\n      \n      .high-contrast {\n        filter: contrast(150%) brightness(110%);\n      }\n      \n      .calm-colors {\n        filter: sepia(20%) saturate(70%);\n      }\n    `;\n    \n    document.head.appendChild(style);\n  }\n\n  private setupEventListeners(): void {\n    // Listen for focus changes to provide ADHD support\n    document.addEventListener('focusin', (event) => {\n      if (this.settings.adhdMode && this.adhdSettings.focusMode) {\n        this.handleFocusForADHD(event.target as HTMLElement);\n      }\n    });\n\n    // Listen for page changes to notify autism users\n    window.addEventListener('popstate', () => {\n      if (this.settings.autismMode && this.autismSettings.changeNotifications) {\n        this.notifyPageChange();\n      }\n    });\n\n    // Listen for mouse movement for dyslexia reading guide\n    document.addEventListener('mousemove', (event) => {\n      if (this.settings.dyslexiaMode && this.dyslexiaSettings.readingGuides) {\n        this.updateReadingGuide(event);\n      }\n    });\n  }\n\n  private applyADHDSupport(): void {\n    document.body.classList.add('adhd-support-enabled');\n    \n    if (this.adhdSettings.focusMode) {\n      this.enableFocusMode();\n    }\n    \n    if (this.adhdSettings.breakReminders) {\n      this.startBreakReminders();\n    }\n    \n    if (this.adhdSettings.distractionBlocking) {\n      this.enableDistractionBlocking();\n    }\n    \n    if (this.adhdSettings.timeAwareness) {\n      this.enableTimeAwareness();\n    }\n  }\n\n  private removeADHDSupport(): void {\n    document.body.classList.remove('adhd-support-enabled');\n    this.disableFocusMode();\n    this.stopBreakReminders();\n    this.disableDistractionBlocking();\n    this.disableTimeAwareness();\n  }\n\n  private enableFocusMode(): void {\n    const focusIndicator = document.createElement('div');\n    focusIndicator.id = 'adhd-focus-indicator';\n    focusIndicator.className = 'adhd-focus-indicator';\n    focusIndicator.textContent = 'Focus Mode Active';\n    document.body.appendChild(focusIndicator);\n    \n    // Start focus session timer\n    this.startFocusSession();\n  }\n\n  private disableFocusMode(): void {\n    const indicator = document.getElementById('adhd-focus-indicator');\n    if (indicator) {\n      indicator.remove();\n    }\n    \n    if (this.focusTimer) {\n      clearTimeout(this.focusTimer);\n      this.focusTimer = null;\n    }\n  }\n\n  private startFocusSession(): void {\n    this.currentFocusSession++;\n    const sessionDuration = 25 * 60 * 1000; // 25 minutes (Pomodoro technique)\n    \n    this.focusTimer = setTimeout(() => {\n      this.endFocusSession();\n    }, sessionDuration);\n    \n    this.emit('focus-session-started', { session: this.currentFocusSession });\n  }\n\n  private endFocusSession(): void {\n    this.emit('focus-session-ended', { session: this.currentFocusSession });\n    \n    if (this.adhdSettings.breakReminders) {\n      this.showBreakReminder();\n    }\n  }\n\n  private startBreakReminders(): void {\n    // Set up periodic break reminders\n    this.breakTimer = setInterval(() => {\n      this.showBreakReminder();\n    }, 30 * 60 * 1000); // Every 30 minutes\n  }\n\n  private stopBreakReminders(): void {\n    if (this.breakTimer) {\n      clearInterval(this.breakTimer);\n      this.breakTimer = null;\n    }\n  }\n\n  private showBreakReminder(): void {\n    const reminder = document.createElement('div');\n    reminder.className = 'adhd-break-reminder';\n    reminder.innerHTML = `\n      <h3>Time for a Break!</h3>\n      <p>You've been working for a while. Take a 5-minute break to recharge.</p>\n      <button onclick=\"this.parentElement.remove()\">Take Break</button>\n      <button onclick=\"this.parentElement.remove()\">Continue Working</button>\n    `;\n    \n    document.body.appendChild(reminder);\n    \n    // Auto-remove after 30 seconds if no action taken\n    setTimeout(() => {\n      if (reminder.parentElement) {\n        reminder.remove();\n      }\n    }, 30000);\n  }\n\n  private enableDistractionBlocking(): void {\n    // Identify and blur potentially distracting elements\n    const distractingSelectors = [\n      '.advertisement',\n      '.social-media-widget',\n      '.notification-popup',\n      '[class*=\"distract\"]',\n      '[class*=\"popup\"]'\n    ];\n    \n    distractingSelectors.forEach(selector => {\n      const elements = document.querySelectorAll(selector);\n      elements.forEach(element => {\n        (element as HTMLElement).classList.add('adhd-distraction-blur');\n        this.distractionElements.push(element as HTMLElement);\n      });\n    });\n  }\n\n  private disableDistractionBlocking(): void {\n    this.distractionElements.forEach(element => {\n      element.classList.remove('adhd-distraction-blur');\n    });\n    this.distractionElements = [];\n  }\n\n  private enableTimeAwareness(): void {\n    const timeDisplay = document.createElement('div');\n    timeDisplay.id = 'adhd-time-awareness';\n    timeDisplay.style.cssText = `\n      position: fixed;\n      bottom: 20px;\n      right: 20px;\n      background: rgba(0, 0, 0, 0.8);\n      color: white;\n      padding: 8px 12px;\n      border-radius: 6px;\n      font-family: monospace;\n      font-size: 14px;\n      z-index: 10000;\n    `;\n    \n    const updateTime = () => {\n      const now = new Date();\n      timeDisplay.textContent = now.toLocaleTimeString();\n    };\n    \n    updateTime();\n    setInterval(updateTime, 1000);\n    \n    document.body.appendChild(timeDisplay);\n  }\n\n  private disableTimeAwareness(): void {\n    const timeDisplay = document.getElementById('adhd-time-awareness');\n    if (timeDisplay) {\n      timeDisplay.remove();\n    }\n  }\n\n  private handleFocusForADHD(element: HTMLElement): void {\n    // Remove focus from all other elements\n    document.querySelectorAll('.adhd-focus-mode').forEach(el => {\n      el.classList.remove('adhd-focus-mode');\n    });\n    \n    // Add focus to current element and its container\n    element.classList.add('adhd-focus-mode');\n    const container = element.closest('section, article, div[role], main');\n    if (container) {\n      container.classList.add('adhd-focus-mode');\n    }\n  }\n\n  private applyAutismSupport(): void {\n    document.body.classList.add('autism-support-enabled');\n    \n    if (this.autismSettings.predictableInterface) {\n      document.body.classList.add('autism-predictable-layout');\n    }\n    \n    if (this.autismSettings.sensoryReduction) {\n      document.body.classList.add('autism-sensory-reduced');\n    }\n    \n    if (this.autismSettings.routineTemplates) {\n      this.enableRoutineTemplates();\n    }\n  }\n\n  private removeAutismSupport(): void {\n    document.body.classList.remove('autism-support-enabled', 'autism-predictable-layout', 'autism-sensory-reduced');\n  }\n\n  private notifyPageChange(): void {\n    const notification = document.createElement('div');\n    notification.className = 'autism-change-notification';\n    notification.textContent = `Page changed to: ${document.title}`;\n    \n    document.body.appendChild(notification);\n    \n    setTimeout(() => {\n      notification.remove();\n    }, 5000);\n  }\n\n  private enableRoutineTemplates(): void {\n    // Create routine template selector\n    const templateSelector = document.createElement('div');\n    templateSelector.id = 'autism-routine-templates';\n    templateSelector.style.cssText = `\n      position: fixed;\n      top: 60px;\n      right: 20px;\n      background: white;\n      border: 1px solid #ddd;\n      border-radius: 8px;\n      padding: 12px;\n      box-shadow: 0 4px 12px rgba(0, 0, 0, 0.15);\n      z-index: 10000;\n    `;\n    \n    templateSelector.innerHTML = `\n      <h4>Routine Templates</h4>\n      <button onclick=\"this.parentElement.style.display='none'\">Writing Session</button>\n      <button onclick=\"this.parentElement.style.display='none'\">Character Development</button>\n      <button onclick=\"this.parentElement.style.display='none'\">Story Planning</button>\n    `;\n    \n    document.body.appendChild(templateSelector);\n  }\n\n  private applyDyslexiaSupport(): void {\n    document.body.classList.add('dyslexia-support-enabled');\n    \n    if (this.dyslexiaSettings.dyslexicFont) {\n      this.loadDyslexicFont();\n      document.body.classList.add('dyslexia-font');\n    }\n    \n    if (this.dyslexiaSettings.increasedSpacing) {\n      document.body.classList.add('dyslexia-spacing');\n    }\n    \n    if (this.dyslexiaSettings.colorOverlays) {\n      document.body.classList.add('dyslexia-overlay');\n    }\n    \n    if (this.dyslexiaSettings.readingGuides) {\n      this.enableReadingGuide();\n    }\n  }\n\n  private removeDyslexiaSupport(): void {\n    document.body.classList.remove('dyslexia-support-enabled', 'dyslexia-font', 'dyslexia-spacing', 'dyslexia-overlay');\n    this.disableReadingGuide();\n  }\n\n  private loadDyslexicFont(): void {\n    const link = document.createElement('link');\n    link.href = 'https://fonts.googleapis.com/css2?family=OpenDyslexic';\n    link.rel = 'stylesheet';\n    document.head.appendChild(link);\n  }\n\n  private enableReadingGuide(): void {\n    const guide = document.createElement('div');\n    guide.id = 'dyslexia-reading-guide';\n    guide.className = 'dyslexia-reading-guide';\n    document.body.appendChild(guide);\n  }\n\n  private disableReadingGuide(): void {\n    const guide = document.getElementById('dyslexia-reading-guide');\n    if (guide) {\n      guide.remove();\n    }\n  }\n\n  private updateReadingGuide(event: MouseEvent): void {\n    const guide = document.getElementById('dyslexia-reading-guide');\n    if (guide) {\n      guide.style.top = `${event.clientY}px`;\n    }\n  }\n\n  private loadUserPreferences(): void {\n    const saved = localStorage.getItem('neurodivergent-preferences');\n    if (saved) {\n      try {\n        const preferences = JSON.parse(saved);\n        this.updateSettings(preferences.general || {});\n        this.updateADHDSettings(preferences.adhd || {});\n        this.updateAutismSettings(preferences.autism || {});\n        this.updateDyslexiaSettings(preferences.dyslexia || {});\n      } catch (error) {\n        console.warn('Failed to load neurodivergent preferences:', error);\n      }\n    }\n  }\n\n  saveUserPreferences(): void {\n    const preferences = {\n      general: this.settings,\n      adhd: this.adhdSettings,\n      autism: this.autismSettings,\n      dyslexia: this.dyslexiaSettings\n    };\n    \n    localStorage.setItem('neurodivergent-preferences', JSON.stringify(preferences));\n  }\n\n  // Public API methods\n  enableADHDMode(): void {\n    this.updateSettings({ adhdMode: true });\n  }\n\n  enableAutismMode(): void {\n    this.updateSettings({ autismMode: true });\n  }\n\n  enableDyslexiaMode(): void {\n    this.updateSettings({ dyslexiaMode: true });\n  }\n\n  startFocusSession(): void {\n    if (this.settings.adhdMode) {\n      this.enableFocusMode();\n    }\n  }\n\n  endFocusSession(): void {\n    this.disableFocusMode();\n  }\n\n  getSettings(): {\n    general: NeurodivergentSettings;\n    adhd: ADHDSettings;\n    autism: AutismSettings;\n    dyslexia: DyslexiaSettings;\n  } {\n    return {\n      general: { ...this.settings },\n      adhd: { ...this.adhdSettings },\n      autism: { ...this.autismSettings },\n      dyslexia: { ...this.dyslexiaSettings }\n    };\n  }\n}"